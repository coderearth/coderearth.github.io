<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coder Earth]]></title>
  <link href="http://coderearth.org/atom.xml" rel="self"/>
  <link href="http://coderearth.org/"/>
  <updated>2014-11-22T17:54:22+05:30</updated>
  <id>http://coderearth.org/</id>
  <author>
    <name><![CDATA[Coder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing and Running Hadoop 2.5 on Windows 7]]></title>
    <link href="http://coderearth.org/blog/2014/11/21/installing-and-running-hadoop-2-dot-5-on-windows-7/"/>
    <updated>2014-11-21T14:47:40+05:30</updated>
    <id>http://coderearth.org/blog/2014/11/21/installing-and-running-hadoop-2-dot-5-on-windows-7</id>
    <content type="html"><![CDATA[<p>We’re going to see how to install and run a single node <a href="http://hadoop.apache.org/">Hadoop</a> cluster, version <a href="http://hadoop.apache.org/#19+November%2C+2014%3A+release+2.5.2+available">2.5</a> on a 64-bit Windows 7. For ease of reading, I have divided this tutorial into multiple chapters.</p>

<h3 id="prerequisites">Prerequisites</h3>
<ul>
  <li>Do not use Cygwin.</li>
  <li>You need to have admin privileges to your computer.</li>
  <li>Follow the <i>exact </i> versions of various softwares with the <i>exact</i> installation paths that are mentioned below.</li>
</ul>

<h3 id="chapter-1-install-java--configure-path">Chapter 1: Install JAVA &amp; Configure PATH</h3>

<ol>
  <li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">Download JDK 1.7</a> and install it in <code>C:\Java\jdk1.7.0_71</code>.</li>
  <li>Set the <code>JAVA_HOME</code> path variable.
    <ol>
      <li>Right-click the My Computer icon on your desktop and select Properties.</li>
      <li>Click the Advanced system settings on the left pane.</li>
      <li>Click the Environment Variables button.</li>
      <li>Under System Variables, click New.</li>
      <li>Enter the variable name as JAVA_HOME.</li>
      <li>Enter the variable value as <code>C:\Java\jdk1.7.0_71</code>.</li>
      <li>Click OK</li>
    </ol>
  </li>
  <li>Add <code>%JAVA_HOME%\bin</code> to <code>Path</code>
    <ol>
      <li>Under System Variables, find the Path variable.</li>
      <li>Click Edit</li>
      <li>Prepend <code>%JAVA_HOME%\bin;</code></li>
      <li>Click OK</li>
    </ol>
  </li>
  <li>
    <p>Verify the JAVA setup.</p>

    <p><img src="http://i.imgur.com/wEexnBj.png" /></p>
  </li>
</ol>

<p>Congratulations, you can now proceed to Chapter 2: Preparing Environment.</p>

<h3 id="chapter-2-preparing-environment">Chapter 2: Preparing Environment</h3>

<h4 id="part-1-download--extract-hadoop-source">Part 1: Download &amp; Extract Hadoop Source</h4>

<ol>
  <li>I use <a href="https://code.google.com/p/conemu-maximus5/">ConEmu</a> as my console, but the windows command prompt should suffice, as well.</li>
  <li>We will be needing <a href="http://www.7-zip.org/download.html">7zip</a> for extracting some archives later. Download &amp; Install it if you don’t have already.</li>
  <li><a href="mirrors.ibiblio.org/apache/hadoop/common/stable2/hadoop-2.5.2-src.tar.gz">Download the Hadoop 2.5.2 Stable Source</a>.</li>
  <li>Extract the <code>.tar.gz</code> file with 7zip twice to get the <code>hadoop-2.5.2-src</code> folder.</li>
  <li>Let’s copy the contents of the above folder to <code>C:\hadoop</code>.</li>
</ol>

<p>At this stage, we have the hadoop source. We now have to build hadoop - to do this, we have to install some dependencies.</p>

<h4 id="part-2-installing-windows-dependencies">Part 2: Installing Windows Dependencies</h4>

<h5 id="dependency-1-apache-maven">Dependency 1: Apache Maven</h5>

<ol>
  <li><a href="http://maven.apache.org/download.cgi">Download Apache Maven 3.2.3</a></li>
  <li>Just like we did with JAVA, Set the <code>M2_HOME</code> path variable as <code>C:\apache-maven-3.2.3</code> and prepend <code>%M2_HOME%\bin;</code> to the system <code>Path</code> variable.</li>
  <li>
    <p>Verify maven installation by typing <code>mvn --version</code> in a command prompt.</p>

    <p><img src="http://i.imgur.com/gINQAu8.png" /></p>
  </li>
</ol>

<h5 id="dependency-2--protocol-buffers">Dependency 2:  Protocol Buffers</h5>

<p>Protocol Buffers is Google’s efficient data interchange format. Read more <a href="https://developers.google.com/protocol-buffers/">here</a>.</p>

<ol>
  <li>Download Protocol Buffers 2.5.0</li>
  <li>Extract it to <code>C:\protoc-2.5.0-win32</code> and prepend it to the system <code>Path</code> variable.</li>
  <li>
    <p>Verify that <code>protoc.exe</code> is in the <code>Path</code>.</p>

    <p>~~~
 C:\Users\suhas&gt;where protoc
 C:\protoc-2.5.0-win32\protoc.exe
 ~~~</p>
  </li>
</ol>

<h4 id="to-be-updated">To Be Updated.</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Polyglot's Guide to Elegant Fibonacci]]></title>
    <link href="http://coderearth.org/blog/2014/11/19/elegant-fibonacci-the-polyglot-guide/"/>
    <updated>2014-11-19T12:21:44+05:30</updated>
    <id>http://coderearth.org/blog/2014/11/19/elegant-fibonacci-the-polyglot-guide</id>
    <content type="html"><![CDATA[<p>The Fibonacci numbers originally seen in <a href="http://en.wikipedia.org/wiki/Fibonacci_number#Origins">Indian Mathematics</a>, appeared in the West in the form of Liber Abaci by Leonardo of Pisa, known as Fibonacci. The series is known to manifest itself in nature in <a href="http://en.wikipedia.org/wiki/Fibonacci_number#In_nature">various ways</a>.</p>

<p>The  series is defined by the following recurrence relation,</p>

<script type="math/tex; mode=display">
F_n = F_{n-1} + F_{n-2}
</script>

<p>with seed values </p>

<script type="math/tex; mode=display">
F_1 = 1,\ F_2 = 2
</script>

<p>or </p>

<script type="math/tex; mode=display">
F_0 = 0,\ F_1 = 1
</script>

<p>The idea is to find out the N<sup>th</sup> fibonacci number programmatically in many of today’s modern programming languages, <i>as elegantly  as possible</i>, while closely resembling the above mathematical relation.</p>

<h3 id="haskell">Haskell</h3>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>fib n = if n &lt; 2 then n else fib(n-1) + fib(n-2)
</pre></td>
</tr></table>
</div>

<p>or alternatively,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>fib 0 = 0
fib 1 = 1
fib n = fib(n-1) + fib(n-2)
</pre></td>
</tr></table>
</div>

<p>Here’s a copy paste from my <code>ghci</code> shell,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>Prelude&gt; let fib n = if n &lt; 2 then n else fib(n-1) + fib(n-2)
Prelude&gt; fib 10
55
Prelude&gt; fib 11
89
Prelude&gt; fib 12
144
</pre></td>
</tr></table>
</div>

<p>The above piece of code will just give us the N<sup>th</sup> fibonacci. If however we want to get fibonacci numbers up until an N, then we can do something like this,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>Prelude&gt; map fib [1..10]
[1,1,2,3,5,8,13,21,34,55]
</pre></td>
</tr></table>
</div>

<h3 id="python">Python</h3>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre>In [<span class="integer">1</span>]: fib = <span class="keyword">lambda</span> n: n <span class="keyword">if</span> n &lt; <span class="integer">2</span> <span class="keyword">else</span> fib(n-<span class="integer">1</span>) + fib(n-<span class="integer">2</span>)

In [<span class="integer">2</span>]: fib(<span class="integer">10</span>)
Out[<span class="integer">2</span>]: <span class="integer">55</span>

In [<span class="integer">3</span>]: fib(<span class="integer">11</span>)
Out[<span class="integer">3</span>]: <span class="integer">89</span>

In [<span class="integer">4</span>]: fib(<span class="integer">12</span>)
Out[<span class="integer">4</span>]: <span class="integer">144</span>

In [<span class="integer">5</span>]: <span class="predefined">map</span>(fib, <span class="predefined">range</span>(<span class="integer">10</span>))
Out[<span class="integer">5</span>]: [<span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">5</span>, <span class="integer">8</span>, <span class="integer">13</span>, <span class="integer">21</span>, <span class="integer">34</span>]
</pre></td>
</tr></table>
</div>

<p>Alternatively,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre><span class="keyword">def</span> <span class="function">fib</span>(n):
    <span class="keyword">if</span> n == <span class="integer">0</span>:
        <span class="keyword">return</span> <span class="integer">0</span>
    <span class="keyword">elif</span> n == <span class="integer">1</span>:
        <span class="keyword">return</span> <span class="integer">1</span>
    <span class="keyword">else</span>:
        <span class="keyword">return</span> fib(n-<span class="integer">1</span>) + fib(n-<span class="integer">2</span>)
</pre></td>
</tr></table>
</div>

<h3 id="c">C++</h3>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre><span class="preprocessor">#include</span> <span class="include">&lt;iostream&gt;</span>
<span class="predefined-type">int</span> fib(<span class="predefined-type">int</span> n) {
    <span class="keyword">if</span> (n == <span class="integer">0</span>) <span class="keyword">return</span> <span class="integer">0</span>;
    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="integer">1</span>) <span class="keyword">return</span> <span class="integer">1</span>;
    <span class="keyword">else</span> <span class="keyword">return</span> fib(n-<span class="integer">1</span>) + fib(n-<span class="integer">2</span>);
}

<span class="predefined-type">int</span> main() {
    <span class="keyword">for</span> (<span class="predefined-type">int</span> i=<span class="integer">0</span>; i&lt;<span class="integer">10</span>; ++i) 
        std::cout&lt;&lt;fib(i)&lt;&lt;<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>;
    <span class="keyword">return</span> <span class="integer">0</span>;
}
</pre></td>
</tr></table>
</div>

<h3 id="ruby">Ruby</h3>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre><span class="keyword">def</span> <span class="function">fib</span>(n)
  n &lt; <span class="integer">2</span> ? n : fib(n-<span class="integer">1</span>) + fib(n-<span class="integer">2</span>)
<span class="keyword">end</span>

<span class="integer">1</span>.upto(<span class="integer">10</span>) { |i| puts fib(i) }
</pre></td>
</tr></table>
</div>

<p>Alternatively, a beginner’s version would look like this,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre><span class="keyword">def</span> <span class="function">fib</span>(n)
  <span class="keyword">case</span>
  <span class="keyword">when</span> n &lt; <span class="integer">2</span>
    n
  <span class="keyword">else</span>
    fib(n-<span class="integer">1</span>) + fib(n-<span class="integer">2</span>)
  <span class="keyword">end</span>
<span class="keyword">end</span>

<span class="keyword">for</span> i <span class="keyword">in</span> <span class="integer">1</span>..<span class="integer">10</span> <span class="keyword">do</span>
  puts fib(i)
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<p>More languages to follow soon.</p>

<p>The <i>elegance</i> here is a small compromise as far as performance is concerned, there are ways to increase computation speed which will be discussed in an upcoming post titled <i> A Polyglot’s Guide to Fast Fibonacci </i>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World.]]></title>
    <link href="http://coderearth.org/blog/2014/11/08/hello/"/>
    <updated>2014-11-08T22:40:28+05:30</updated>
    <id>http://coderearth.org/blog/2014/11/08/hello</id>
    <content type="html"><![CDATA[<p>Because every programming endeavor should start with a Hello, world.</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre><span class="comment">/*
 * Prints Hello, world on the screen
 * taken from &quot;The C Programming Language&quot;
 * by Brian Kernighan and Dennis Ritchie
 */</span>

<span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>

main()
{
    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">hello, world</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
}
</pre></td>
</tr></table>
</div>
]]></content>
  </entry>
  
</feed>
